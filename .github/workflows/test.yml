name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true
      - name: Run unit tests
        run: make test

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true
      - name: Build
        run: go build -v .

  acceptance-test:
    runs-on: ubuntu-latest
    needs: [unit-test, build, lint]
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      fail-fast: false
      matrix:
        terraform: ['1.13.3']
        k3s:
            - 'rancher/k3s:v1.31.2-k3s1'   # Minimum supported
            - 'rancher/k3s:v1.34.1-k3s1'   # Latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Install kubectl & k3d
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Create K3d cluster
        run: |
          k3d cluster create k8sconnect-test \
            --image ${{ matrix.k3s }} \
            --wait

      - name: Run acceptance tests
        env:
          TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform }}
        run: make testacc

      - name: Run examples tests
        env:
          TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform }}
          TF_ACC_KUBECONFIG: "$(cat .testbuild/kubeconfig.yaml)"
        run: make test-examples

      - name: Run documentation examples tests
        env:
          TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform }}
          TF_ACC_KUBECONFIG: "$(cat .testbuild/kubeconfig.yaml)"
        run: make test-docs-examples

      - name: Run diagnostic tests (warnings/errors)
        env:
          TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform }}
          TF_ACC_KUBECONFIG: "$(cat .testbuild/kubeconfig.yaml)"
        run: make test-diagnostics

      - name: Clean up K3d cluster
        if: always()
        run: k3d cluster delete k8sconnect-test || true

  acceptance-test-summary:
    name: acceptance-test
    runs-on: ubuntu-latest
    needs: acceptance-test
    if: always()
    steps:
      - name: Check matrix results
        run: |
          if [[ "${{ needs.acceptance-test.result }}" == "success" ]]; then
            echo "All acceptance tests passed"
            exit 0
          else
            echo "Some acceptance tests failed"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true
      - name: Run go vet
        run: go vet ./...
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  coverage:
    runs-on: ubuntu-latest
    needs: [unit-test, build, lint]
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.3'
          terraform_wrapper: false

      - name: Install kubectl & k3d
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Run coverage
        env:
          TF_ACC_TERRAFORM_VERSION: '1.13.3'
        run: make coverage

      - name: Remove individual coverage files before upload
        if: always()
        run: |
          rm -f coverage-unit.out coverage-acceptance.out
          echo "Uploading only merged coverage.out to CodeCov"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          fail_ci_if_error: false
          verbose: true

      - name: Clean up
        if: always()
        run: make clean

