1. Make cert handling smarter

k8sconnect_manifest.namespace_k8sconnect: Creating...
╷
│ Error: Preparation Failed
│
│   with k8sconnect_manifest.namespace_k8sconnect,
│   on main.tf line 64, in resource "k8sconnect_manifest" "namespace_k8sconnect":
│   64: resource "k8sconnect_manifest" "namespace_k8sconnect" {
│
│ failed to create Kubernetes client: failed to create REST config: failed to decode
│ cluster_ca_certificate: illegal base64 data at input byte 0

this is the provider being confused by the cert not being encoded. I need to either make this the same as the other two providers, or give a much, much better error message

Or even better, autodetect and accept both! Would need a test for this.

2. Add custom ownership annotations. This can solve the issue with cross state conflicts. Not sure how hard this is.

3. Add the missing test called ./failing_test

4. Add existing resource datasource. This should be last after manifest resource is fully polished.

5. Reduce cyclomatic complexity of all functions to less than 15.

6. Deep dive into UX. Do we need to show a yaml diff if the dry run diff is better?

7. SEO. Is the provider named optimally for discovery?

8. Release pipeline needs love. Tofu release is missing. Need to verify that builds work for windows and linux.

9. Need to double check that the attribute doc strings are completely correct. I've made changes to status that might be updated.

10. Remove some attributes from UI that should probably be private.

11. Write up main docs for landing page.

12. Medium article, posts to r/kubernetes, r/terraform, hackernews.

13. Make sure all key features are documented. I've made changes to status that might be updated.

14. Need many working examples linked to make feature list. Is there a way to auto test them? Non working examples really suck.

15. Add ignore_field_changes for surgical ignores. Avoids annoying initial diff for HPA and other controllers.

16. Consider moving key features higher up in the docs.

17. Move development from master to develop branch

18. There are probably more edge cases for ownership that need acceptance testing. Need to make a table of all possible transitions. Also make sure that the warnings are accurate for all of them.

19. Harmonize errors across the project. Need a single source of truth to share between the tests and the code.

20. Remove the many print statements throughout the codebase or convert to logs.

21. Convert this list to project issues.

22. Address code scanning alerts currently in github.

23. Tag line: A kubernetes terraform provider built around edge cases.

24. Does the HPA simulation test handle multiple simultaneous ownership changes? What about a mix of ownership changes and normal drift? Can the code send multiple errors to the test? If it did would be understood? Do we need to harmonize errors first?

25. From README: "All cluster_connection fields are marked sensitive and won't appear in logs or plan output." Did I change that attribute name? Should I still? How about cluster_auth? It's more descriptive.

26. Canonicalize the yaml so that we don't get diffs from order changes. We already exclude whitespace changes. But if we are only going to show the json (difficult decision) then we need to be more precise. Making people diff their own yaml seems like a bad idea.
