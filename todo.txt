1. Make cert handling smarter

k8sconnect_manifest.namespace_k8sconnect: Creating...
╷
│ Error: Preparation Failed
│
│   with k8sconnect_manifest.namespace_k8sconnect,
│   on main.tf line 64, in resource "k8sconnect_manifest" "namespace_k8sconnect":
│   64: resource "k8sconnect_manifest" "namespace_k8sconnect" {
│
│ failed to create Kubernetes client: failed to create REST config: failed to decode
│ cluster_ca_certificate: illegal base64 data at input byte 0

this is the provider being confused by the cert not being encoded. I need to either make this the same as the other two providers, or give a much, much better error message

Or even better, autodetect and accept both! Would need a test for this.

2. Add custom ownership annotations. This can solve the issue with cross state conflicts. Not sure how hard this is.

5. Reduce cyclomatic complexity of all functions to less than 15.

6. Deep dive into UX. Do we need to show a yaml diff if the dry run diff is better?

7. SEO. Is the provider named optimally for discovery?

8. Release pipeline needs love. Tofu release is missing. Need to verify that builds work for windows and linux.

9. Need to double check that the attribute doc strings are completely correct. I've made changes to status that might be updated.

10. Remove some attributes from UI that should probably be private.

11. Write up main docs for registry landing page.

12. Medium article, posts to r/kubernetes, r/terraform, hackernews.

13. Make sure all key features are documented. I've made changes to status that might be updated.

15. Add ignore_field_changes for surgical ignores. Avoids annoying initial diff for HPA and other controllers.

16. Consider moving key features higher up in the docs.

18. There are probably more edge cases for ownership that need acceptance testing. Need to make a table of all possible transitions. Also make sure that the warnings are accurate for all of them.

19. Harmonize errors across the project. Need a single source of truth to share between the tests and the code.

20. Remove the many print statements throughout the codebase or convert to logs.

21. Convert this list to project issues.

22. Address code scanning alerts currently in github.

23. Tag line: A kubernetes terraform provider built around edge cases.

24. Does the HPA simulation test handle multiple simultaneous ownership changes? What about a mix of ownership changes and normal drift? Can the code send multiple errors to the test? If it did would be understood? Do we need to harmonize errors first?

27. Do we need to test the ownership conflict test without force_conflicts=true?

28. Remove feature flag now that everything is working.



Triage:

Add better error for certs not being base64

Error survey and single source of truth

General simplification and refactoring

ignore_changes []

Attribute transitions and edge case tests.

Testing survey

ignore_field_changes = []. Or, wrap it into ignore_changes = [yaml_body.thing.thing]

Verify import blocks work

Delayed application of an out of date plan.

move pure server side up in feature list.

Do I need to add a warning for terraform less than 1.6 or pre SSA k8s?

Should I make the entire json manifest available as a computed attribute? Could be useful.

Guardrails around people looking for status items that really don't exist?
  For example, error if value doesn't start with status as a reminder not to wait for other stuff like annotations?

  field   = "status.loadBalancer.ingress"

Remove field_ownership from diff. It's just noise, probably.

Add token example to connection methods section of readme.

Add open tofu tests.

Check earliest version of terraform this works with. 1.0 or really 1.6?

Check tests for stubs and skips that I might have forgotten about.

The resource datasource has ugly args that are nested for no reason. Flatten it unless you are adding more attributes.

Consider adding a wait_for to the datasource. This could be complex.

Better errors for the new datasource.

Can we lookup in the datasource output dynamically? Need to use the same logic we use in the resource to convert json to attribute probably. Look at how other providers work.

I think the cluster_connection attribute needs better validation testing. It's somewhat complex. Perhaps some kind of combinatorial random tests of different attributes? Which things are mutually exclusive? Maybe it's simpler than I remember

Need significant tests for the new datasource. Specifically how it works in the dependency graph. How does it work with unknowns (both passing and recieving). What about interpolation? Does it solve my own cluster problems?

Does new datasource need a wait_for? Does that make sense in this context? If we are using it during apply, this could be valuable. If I can't get a LB hostname or IP, not sure how useful it is.

Example files probably need both inline and template file examples. Don't want people thinking you can't do both.

Fill in all the missing files under Community Standards. issue templates, contributing, etc.

For auth, do I need to handle both auth versions:
API version compatibility (client.authentication.k8s.io/v1 vs v1beta1)

