CRITICAL BUGS & FIXES

* Solve import syntax issue for api version
GB does this:
   # Import the my-namespace Namespace
   terraform import kubectl_manifest.my-namespace v1//Namespace//my-namespace

   # Import the certmanager Issuer CRD named cluster-selfsigned-issuer-root-ca from the my-namespace namespace
   $ terraform import -provider kubectl module.kubernetes.kubectl_manifest.crd-example certmanager.k8s.io/v1alpha1//Issuer//cluster-selfsigned-issuer-root-ca//my-namespace


DOCUMENTATION & RELEASE

Verify attribute docs: Status changes need documentation updates
Nested Schema for wait_for: Needs love


TESTING GAPS

Ownership edge cases: Create transition matrix and acceptance tests for all ownership scenarios
Import blocks: Verify they work correctly
HPA simulation: Test multiple simultaneous ownership changes
Find a way to test multicluster
Delayed plan application: Handle out of date plans
Autodetect the most recent terraform version for testing locally and in CI. Otherwise this is monthly toil.

FEATURE ADDITIONS

Custom ownership annotations: Solve cross-state conflicts
Status field guardrails: Warn if field doesn't start with "status"

UX IMPROVEMENTS

Warnings for old versions: Terraform <1.6 or pre-SSA Kubernetes
Lock down the interface before launch: The attributes and behavior I ship with will haunt me for years.
https://registry.terraform.io/providers/gavinbunney/kubectl/latest/docs/resources/kubectl_manifest#attribute-reference
https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/manifest


CODE QUALITY

Cyclomatic complexity: Reduce all functions to <15

MARKETING & GROWTH

Launch content: Medium article, r/kubernetes, r/terraform, HackerNews posts, SweetOps Slack, Kubernetes Slack


DEFERRED/COMPLEX

Dynamic datasource lookup: Use same JSON-to-attribute logic as resource
Migration plan for other providers
Rename managed_state_projection. No!
Fix makefile to install all dependencies. Try on fresh laptop.
Add back cluster_info datasource that has more info than GB:
https://registry.terraform.io/providers/gavinbunney/kubectl/latest/docs/data-sources/kubectl_server_version


Migration tooling!
"Stuck with thousands of lines of Kubernetes HCL? We'll help you escape."
hcl2yaml main.tf > manifests.yaml
Could probably knock out an MVP using the Terraform provider schema definitions to reverse the translation.


  Critical Gaps to Address

  Must-Have Before Release:

  1. Import documentation
    - Your format, examples, behavior
    - Critical - people need to migrate existing resources

  Should Consider:

  4. field_manager_name - let users control the field manager identity
    - Useful for debugging SSA conflicts
    - HashiCorp has this, I auto-generate
    - Could be quite complex?
  6. override_namespace - apply to different namespace than YAML specifies
    - kubectl has this
    - Useful for multi-tenancy patterns
    - Could be nice. Not sure how hard.


Add override_namespace to manifest resource for multi-tenancy patterns

Unmet needs and pain points:

Terraform wants to be declarative and stateful, Kubernetes wants to be self-healing and continuously reconciling, and developers just want to ship code without becoming infrastructure experts.

Add a file with the terraform block for the examples? It would be nice to be fully copy pastable.

Add a deep compare yaml helper function for the tests. string comparisons are brittle and have wasted a lot of time for me.
 

Add CI job to check/update cluster scoped resources list?

Maybe call them: yaml_split and yaml_sort?

Test section 15-18 in EDGE_CASES.md for the patch after I dogfood it a bit.

Should wait_for even be in the patch resource? What aboout this take_ownership attribute. It feels too dramatic.

Does version in terraform-registry-manifest.json actually matter? Does it need to match the actual version? Add to release automation?

Should the resource datasource be restricted from looking at resources we own? I thought it was already but I guess not.

