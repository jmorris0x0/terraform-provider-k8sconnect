CRITICAL BUGS & FIXES

* Solve import syntax issue for api version
GB does this:
   # Import the my-namespace Namespace
   terraform import kubectl_manifest.my-namespace v1//Namespace//my-namespace

   # Import the certmanager Issuer CRD named cluster-selfsigned-issuer-root-ca from the my-namespace namespace
   $ terraform import -provider kubectl module.kubernetes.kubectl_manifest.crd-example certmanager.k8s.io/v1alpha1//Issuer//cluster-selfsigned-issuer-root-ca//my-namespace

Import blocks: Verify they work correctly


Nested Schema for wait_for: Needs love


Ownership edge cases: Create transition matrix and acceptance tests for all ownership scenarios
Delayed plan application: Handle out of date plans
Autodetect the most recent terraform version for testing locally and in CI. Otherwise this is monthly toil.

Does ignore_fields let you ignore status? Does wait_for allow you to wait_for things that aren't status?

FEATURE ADDITIONS

Custom ownership annotations: Solve cross-state conflicts
Status field guardrails: Warn if field doesn't start with "status". Do I have an error? Is it useful?

MARKETING & GROWTH

Launch content: Medium article, r/kubernetes, r/terraform, HackerNews posts, SweetOps Slack, Kubernetes Slack

Migration tooling!
"Stuck with thousands of lines of Kubernetes HCL? We'll help you escape."
hcl2yaml main.tf > manifests.yaml
Could probably knock out an MVP using the Terraform provider schema definitions to reverse the translation.


Terraform wants to be declarative and stateful, Kubernetes wants to be self-healing and continuously reconciling, and developers just want to ship code without becoming infrastructure experts.

Add a file with the terraform block for the examples? It would be nice to be fully copy pastable.

Add a deep compare yaml helper function for the tests. string comparisons are brittle and have wasted a lot of time for me.

Add CI job to check/update cluster scoped resources list?

Test section 15-18 in EDGE_CASES.md for the patch after I dogfood it a bit.

Should the resource datasource and patch be restricted from looking at resources we own? I thought it was already but I guess not. How would this work for plans where the cluster can't be reached? Maybe just warn? Do I already do this?

Can you wait for stuff that isn't status? Is wait_for really sold in the registry docs? We kinda forgot about it for a minute.

Autotest markdown examples?

Mention that that two kinds of patches aren't SSA therefore UX difference.

Should I make field_ownership sensitive? It's very noisy during destroy.

Last minute decision: Should I change the name of managed_state_projection?

I should be using varibles.tf in my example files, maybe. It might make it more pasteable, but at the cost of not being able to run markdown embedded examples later.

Rename the  oidc-setup make target to create-cluster? When I built it oidc was the hard part but that was solved a long time ago.
