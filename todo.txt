Nested Schema for wait_for: Needs love

Delayed plan application: Handle out of date plansI
Autodetect the most recent terraform version for testing locally and in CI. Otherwise this is monthly toil.

Does ignore_fields let you ignore status? Does wait_for allow you to wait_for things that aren't status?

Custom ownership annotations: Solve cross-state conflicts
Status field guardrails: Warn if field doesn't start with "status". Do I have an error? Is it useful?

Terraform wants to be declarative and stateful, Kubernetes wants to be self-healing and continuously reconciling, and developers just want to ship code without becoming infrastructure experts.

Add CI job to check/update cluster scoped resources list?

Test section 15-18 in EDGE_CASES.md for the patch after I dogfood it a bit.

Should the resource datasource and patch be restricted from looking at resources we own? I thought it was already but I guess not. How would this work for plans where the cluster can't be reached? Maybe just warn? Do I already do this?

Answer: We are definitely restricting patching our own resources but currently allowing reads. (pretty sure)

Can you wait for stuff that isn't status? Is wait_for really sold in the registry docs? We kinda forgot about it for a minute.

Mention that that two kinds of patches aren't SSA therefore UX difference.

Work on the FAQ. It need some love.

Update comparison table in README.

add ", helper datasource" to CRD row in readme.

wait_for row is out of date. Need to update to wait resource. Add to FAQ: Why is wait a resource instead of a datasource? Why separate resrouce.

Should i call it wait_status? Or status_wait? wait just seems like a time wait.

object_ref inconsistency vs the object datasource? What did I decide about this?
