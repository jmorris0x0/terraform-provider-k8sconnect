---
page_title: "{{.Type}} {{.Name}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Type}}: {{.Name}}

{{ .Description | trimspace }}

## Example Usage - Reading Cluster Resources

```terraform
# Read the kubernetes API server service (present in all clusters)
data "k8sconnect_manifest" "kubernetes_api" {
  api_version = "v1"
  kind        = "Service"
  name        = "kubernetes"
  namespace   = "default"

  cluster_connection = var.cluster_connection
}

# Parse the manifest JSON to access fields
locals {
  kubernetes_api = jsondecode(data.k8sconnect_manifest.kubernetes_api.manifest)
}

# Use the data in other resources
resource "k8sconnect_manifest" "api_endpoint_config" {
  yaml_body = <<-YAML
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: api-info
      namespace: default
    data:
      cluster_ip: "${local.kubernetes_api.spec.clusterIP}"
      port: "${tostring(local.kubernetes_api.spec.ports[0].port)}"
      endpoint: "https://${local.kubernetes_api.spec.clusterIP}:${tostring(local.kubernetes_api.spec.ports[0].port)}"
  YAML

  cluster_connection = var.cluster_connection
}
```

## Example Usage - Reading Cloud Provider Resources

Read resources created by cloud providers (EKS, GKE, AKS):

```terraform
# Read AWS EKS aws-node DaemonSet configuration
data "k8sconnect_manifest" "aws_node" {
  api_version = "apps/v1"
  kind        = "DaemonSet"
  name        = "aws-node"
  namespace   = "kube-system"

  cluster_connection = {
    host                   = aws_eks_cluster.main.endpoint
    cluster_ca_certificate = base64decode(aws_eks_cluster.main.certificate_authority[0].data)
    exec = {
      api_version = "client.authentication.k8s.io/v1"
      command     = "aws"
      args        = ["eks", "get-token", "--cluster-name", aws_eks_cluster.main.name]
    }
  }
}

locals {
  aws_node = jsondecode(data.k8sconnect_manifest.aws_node.manifest)
}

output "aws_node_image" {
  value       = local.aws_node.spec.template.spec.containers[0].image
  description = "Current AWS VPC CNI image version"
}
```

## Accessing Field Data

The datasource provides three output formats:

- `manifest` - JSON string representation (use with `jsondecode()`)
- `yaml_body` - YAML string representation
- `object` - Dynamic object (currently null, use `manifest` with `jsondecode()` instead)

{{ .SchemaMarkdown | trimspace }}
