// internal/k8sinline/resource/manifest/manifest.go
package manifest

import (
	"context"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	k8sschema "k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
	"sigs.k8s.io/yaml"

	"github.com/jmorris0x0/terraform-provider-k8sinline/internal/k8sinline/k8sclient"
)

var _ resource.Resource = (*manifestResource)(nil)

// ClientGetter function type for dependency injection
type ClientGetter func(ClusterConnectionModel) (k8sclient.K8sClient, error)

// ClusterConnectionModel is exported for use in provider
type ClusterConnectionModel struct {
	Host                 types.String   `tfsdk:"host"`
	ClusterCACertificate types.String   `tfsdk:"cluster_ca_certificate"`
	KubeconfigFile       types.String   `tfsdk:"kubeconfig_file"`
	KubeconfigRaw        types.String   `tfsdk:"kubeconfig_raw"`
	Context              types.String   `tfsdk:"context"`
	Exec                 *execAuthModel `tfsdk:"exec"`
}

type execAuthModel struct {
	APIVersion types.String   `tfsdk:"api_version"`
	Command    types.String   `tfsdk:"command"`
	Args       []types.String `tfsdk:"args"`
}

type manifestResource struct {
	clientGetter ClientGetter
}

type manifestResourceModel struct {
	ID                types.String           `tfsdk:"id"`
	YAMLBody          types.String           `tfsdk:"yaml_body"`
	ClusterConnection ClusterConnectionModel `tfsdk:"cluster_connection"`
	DeleteProtection  types.Bool             `tfsdk:"delete_protection"`
}

// NewManifestResource creates a new manifest resource (backward compatibility)
func NewManifestResource() resource.Resource {
	return &manifestResource{
		clientGetter: CreateK8sClientFromConnection,
	}
}

// NewManifestResourceWithClientGetter creates a manifest resource with custom client getter
func NewManifestResourceWithClientGetter(getter ClientGetter) resource.Resource {
	return &manifestResource{
		clientGetter: getter,
	}
}

// CreateK8sClientFromConnection creates a K8sClient from connection model (exported for provider use)
func CreateK8sClientFromConnection(conn ClusterConnectionModel) (k8sclient.K8sClient, error) {
	r := &manifestResource{}
	return r.createK8sClient(conn)
}

func (r *manifestResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_manifest"
}

func (r *manifestResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Applies a single‑document Kubernetes YAML manifest to a cluster, with per‑resource inline or kubeconfig‑based connection settings.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Description: "Unique identifier for this manifest (generated by the provider).",
			},
			"yaml_body": schema.StringAttribute{
				Required:    true,
				Description: "UTF‑8 encoded, single‑document Kubernetes YAML. Multi‑doc files will fail validation.",
			},
			"delete_protection": schema.BoolAttribute{
				Optional:    true,
				Description: "When enabled, prevents Terraform from deleting this resource. Must be disabled before destruction. Defaults to false.",
			},
		},
		Blocks: map[string]schema.Block{
			"cluster_connection": schema.SingleNestedBlock{
				Description: "Connection settings for the target cluster. Exactly one of inline, kubeconfig_file or kubeconfig_raw must be populated.",
				Attributes: map[string]schema.Attribute{
					"host": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Kubernetes API server endpoint (e.g. https://example.com). Required for inline mode.",
					},
					"cluster_ca_certificate": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "PEM‑encoded CA certificate bundle for the API server. Required for inline mode.",
					},
					"kubeconfig_file": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Filesystem path to an existing kubeconfig file. Always supports live diffing.",
					},
					"kubeconfig_raw": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Raw kubeconfig YAML content (CI‑friendly).",
					},
					"context": schema.StringAttribute{
						Optional:    true,
						Sensitive:   true,
						Description: "Context name within the provided kubeconfig (file or raw).",
					},
					"exec": schema.ObjectAttribute{
						Description: "Inline exec‑auth configuration for dynamic credentials. Must include api_version and command; args is optional.",
						Optional:    true,
						Sensitive:   true,

						AttributeTypes: map[string]attr.Type{
							"api_version": types.StringType,
							"command":     types.StringType,
							"args":        types.ListType{ElemType: types.StringType},
						},
					},
				},
			},
		},
	}
}

func (r *manifestResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data manifestResourceModel

	diags := req.Config.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse YAML into unstructured object
	obj, err := r.parseYAML(data.YAMLBody.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Invalid YAML", fmt.Sprintf("Failed to parse YAML: %s", err))
		return
	}

	// Create K8s client from cluster connection (now with caching)
	client, err := r.clientGetter(data.ClusterConnection)
	if err != nil {
		resp.Diagnostics.AddError("Connection Failed", fmt.Sprintf("Failed to create Kubernetes client: %s", err))
		return
	}

	// Apply the manifest using server-side apply
	err = client.SetFieldManager("k8sinline").Apply(ctx, obj, k8sclient.ApplyOptions{
		FieldManager: "k8sinline",
		Force:        false,
	})
	if err != nil {
		resourceDesc := fmt.Sprintf("%s %s", obj.GetKind(), obj.GetName())
		severity, title, detail := r.classifyK8sError(err, "Create", resourceDesc)
		if severity == "warning" {
			resp.Diagnostics.AddWarning(title, detail)
		} else {
			resp.Diagnostics.AddError(title, detail)
		}
		return
	}

	// Generate resource ID
	id := r.generateID(obj, data.ClusterConnection)
	data.ID = types.StringValue(id)

	tflog.Trace(ctx, "applied manifest", map[string]interface{}{
		"id":        data.ID.ValueString(),
		"kind":      obj.GetKind(),
		"name":      obj.GetName(),
		"namespace": obj.GetNamespace(),
	})

	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *manifestResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data manifestResourceModel

	diags := req.State.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse YAML to get object metadata
	obj, err := r.parseYAML(data.YAMLBody.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Invalid YAML", fmt.Sprintf("Failed to parse YAML: %s", err))
		return
	}

	// Create K8s client from cluster connection (cached)
	client, err := r.clientGetter(data.ClusterConnection)
	if err != nil {
		resp.Diagnostics.AddError("Connection Failed", fmt.Sprintf("Failed to create Kubernetes client: %s", err))
		return
	}

	// Get GVR for the object
	gvr, err := r.getGVR(ctx, client, obj)
	if err != nil {
		resp.Diagnostics.AddError("Resource Discovery Failed", fmt.Sprintf("Failed to determine resource type: %s", err))
		return
	}

	// Check if object still exists
	_, err = client.Get(ctx, gvr, obj.GetNamespace(), obj.GetName())
	if err != nil {
		if errors.IsNotFound(err) {
			// Object no longer exists - remove from state
			resp.State.RemoveResource(ctx)
			return
		}
		// Other errors should be reported
		resourceDesc := fmt.Sprintf("%s %s", obj.GetKind(), obj.GetName())
		severity, title, detail := r.classifyK8sError(err, "Read", resourceDesc)
		if severity == "warning" {
			resp.Diagnostics.AddWarning(title, detail)
		} else {
			resp.Diagnostics.AddError(title, detail)
		}
		return
	}

	// Object exists - keep current state
	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *manifestResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data manifestResourceModel

	diags := req.Plan.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse YAML into unstructured object
	obj, err := r.parseYAML(data.YAMLBody.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Invalid YAML", fmt.Sprintf("Failed to parse YAML: %s", err))
		return
	}

	// Create K8s client from cluster connection (cached)
	client, err := r.clientGetter(data.ClusterConnection)
	if err != nil {
		resp.Diagnostics.AddError("Connection Failed", fmt.Sprintf("Failed to create Kubernetes client: %s", err))
		return
	}

	// Apply the updated manifest (server-side apply is idempotent)
	err = client.SetFieldManager("k8sinline").Apply(ctx, obj, k8sclient.ApplyOptions{
		FieldManager: "k8sinline",
		Force:        false,
	})
	if err != nil {
		resourceDesc := fmt.Sprintf("%s %s", obj.GetKind(), obj.GetName())
		severity, title, detail := r.classifyK8sError(err, "Update", resourceDesc)
		if severity == "warning" {
			resp.Diagnostics.AddWarning(title, detail)
		} else {
			resp.Diagnostics.AddError(title, detail)
		}
		return
	}

	tflog.Trace(ctx, "updated manifest", map[string]interface{}{
		"id":        data.ID.ValueString(),
		"kind":      obj.GetKind(),
		"name":      obj.GetName(),
		"namespace": obj.GetNamespace(),
	})

	diags = resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *manifestResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data manifestResourceModel

	diags := req.State.Get(ctx, &data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Check delete protection
	if !data.DeleteProtection.IsNull() && data.DeleteProtection.ValueBool() {
		resp.Diagnostics.AddError(
			"Resource Protected from Deletion",
			"This resource has delete_protection enabled. To delete this resource, first set delete_protection = false in your configuration, run terraform apply, then run terraform destroy.",
		)
		return
	}

	// Parse YAML to get object metadata
	obj, err := r.parseYAML(data.YAMLBody.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Invalid YAML", fmt.Sprintf("Failed to parse YAML: %s", err))
		return
	}

	// Create K8s client from cluster connection (cached)
	client, err := r.clientGetter(data.ClusterConnection)
	if err != nil {
		resp.Diagnostics.AddError("Connection Failed", fmt.Sprintf("Failed to create Kubernetes client: %s", err))
		return
	}

	// Get GVR for the object
	gvr, err := r.getGVR(ctx, client, obj)
	if err != nil {
		resp.Diagnostics.AddError("Resource Discovery Failed", fmt.Sprintf("Failed to determine resource type: %s", err))
		return
	}

	// Delete the object
	err = client.Delete(ctx, gvr, obj.GetNamespace(), obj.GetName(), k8sclient.DeleteOptions{})
	if err != nil {
		if errors.IsNotFound(err) {
			// Object already gone - that's fine
			tflog.Trace(ctx, "object already deleted", map[string]interface{}{
				"id":        data.ID.ValueString(),
				"kind":      obj.GetKind(),
				"name":      obj.GetName(),
				"namespace": obj.GetNamespace(),
			})
			return
		}
		// Other errors should be reported
		resourceDesc := fmt.Sprintf("%s %s", obj.GetKind(), obj.GetName())
		severity, title, detail := r.classifyK8sError(err, "Delete", resourceDesc)
		if severity == "warning" {
			resp.Diagnostics.AddWarning(title, detail)
		} else {
			resp.Diagnostics.AddError(title, detail)
		}
		return
	}

	tflog.Trace(ctx, "deleted manifest", map[string]interface{}{
		"id":        data.ID.ValueString(),
		"kind":      obj.GetKind(),
		"name":      obj.GetName(),
		"namespace": obj.GetNamespace(),
	})
}

// ImportState method implementing kubeconfig strategy
func (r *manifestResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Parse import ID: "context/namespace/kind/name" or "context/kind/name" for cluster-scoped
	kubeContext, namespace, kind, name, err := r.parseImportID(req.ID)
	if err != nil {
		resp.Diagnostics.AddError(
			"Invalid Import ID",
			fmt.Sprintf("Expected format: <context>/<namespace>/<kind>/<name> or <context>/<kind>/<name>\n\nExamples:\n"+
				"  prod/default/Pod/nginx\n"+
				"  staging/kube-system/Service/coredns\n"+
				"  prod/Namespace/my-namespace\n"+
				"  dev/ClusterRole/admin\n\nError: %s", err.Error()),
		)
		return
	}

	// Validate required parts
	if kubeContext == "" {
		resp.Diagnostics.AddError(
			"Import Failed: Missing Context",
			"The import ID must include a kubeconfig context as the first part.\n\n"+
				"Format: <context>/<namespace>/<kind>/<name> or <context>/<kind>/<name>\n\n"+
				"Available contexts can be found with: kubectl config get-contexts",
		)
		return
	}
	if kind == "" {
		resp.Diagnostics.AddError(
			"Import Failed: Missing Kind",
			"The resource kind cannot be empty in the import ID.",
		)
		return
	}
	if name == "" {
		resp.Diagnostics.AddError(
			"Import Failed: Missing Name",
			"The resource name cannot be empty in the import ID.",
		)
		return
	}

	// Read kubeconfig from KUBECONFIG env var or default location
	kubeconfigPath := os.Getenv("KUBECONFIG")
	if kubeconfigPath == "" {
		homeDir := os.Getenv("HOME")
		if homeDir == "" {
			resp.Diagnostics.AddError(
				"Import Failed: KUBECONFIG Not Found",
				"KUBECONFIG environment variable is not set and HOME directory could not be determined.\n\n"+
					"Set KUBECONFIG environment variable:\n"+
					"  export KUBECONFIG=~/.kube/config\n"+
					"  terraform import k8sinline_manifest.example \"prod/default/Pod/nginx\"",
			)
			return
		}
		kubeconfigPath = filepath.Join(homeDir, ".kube", "config")
	}

	// Check if kubeconfig file exists
	if _, err := os.Stat(kubeconfigPath); os.IsNotExist(err) {
		resp.Diagnostics.AddError(
			"Import Failed: Kubeconfig File Not Found",
			fmt.Sprintf("Kubeconfig file not found at: %s\n\n"+
				"Ensure your kubeconfig file exists or set KUBECONFIG environment variable:\n"+
				"  export KUBECONFIG=/path/to/your/kubeconfig\n"+
				"  terraform import k8sinline_manifest.example \"prod/default/Pod/nginx\"", kubeconfigPath),
		)
		return
	}

	// Create K8s client using kubeconfig file and context
	client, err := k8sclient.NewDynamicK8sClientFromKubeconfigFile(kubeconfigPath, kubeContext)
	if err != nil {
		// Provide context-specific error messages
		if strings.Contains(err.Error(), "context") && strings.Contains(err.Error(), "not found") {
			resp.Diagnostics.AddError(
				"Import Failed: Context Not Found",
				fmt.Sprintf("Context \"%s\" not found in kubeconfig.\n\n"+
					"Available contexts:\n"+
					"  kubectl config get-contexts\n\n"+
					"Details: %s", kubeContext, err.Error()),
			)
		} else if strings.Contains(err.Error(), "kubeconfig") {
			resp.Diagnostics.AddError(
				"Import Failed: Invalid Kubeconfig",
				fmt.Sprintf("Failed to parse kubeconfig file at %s.\n\n"+
					"Ensure your kubeconfig is valid:\n"+
					"  kubectl config view\n\n"+
					"Details: %s", kubeconfigPath, err.Error()),
			)
		} else {
			resp.Diagnostics.AddError(
				"Import Failed: Connection Error",
				fmt.Sprintf("Failed to create Kubernetes client from kubeconfig.\n\n"+
					"This usually means:\n"+
					"1. Invalid kubeconfig file\n"+
					"2. Cluster is unreachable\n"+
					"3. Authentication failed\n\n"+
					"Kubeconfig: %s\n"+
					"Context: %s\n"+
					"Details: %s", kubeconfigPath, kubeContext, err.Error()),
			)
		}
		return
	}

	// Discover GVR and fetch the live object in one step
	_, liveObj, err := client.GetGVRFromKind(ctx, kind, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "no API resource found for kind") {
			resp.Diagnostics.AddError(
				"Import Failed: Unknown Resource Kind",
				fmt.Sprintf("The resource kind \"%s\" was not found in the cluster.\n\n"+
					"This usually means:\n"+
					"1. The kind name is misspelled (check capitalization)\n"+
					"2. A CRD needs to be installed first\n"+
					"3. The resource type doesn't exist in this Kubernetes version\n\n"+
					"Check available resource types:\n"+
					"  kubectl api-resources | grep -i %s", kind, strings.ToLower(kind)),
			)
		} else if strings.Contains(err.Error(), "not found") {
			resp.Diagnostics.AddError(
				"Import Failed: Resource Not Found",
				fmt.Sprintf("The %s \"%s\" was not found in the cluster.\n\n"+
					"Verify the resource exists:\n"+
					"  kubectl get %s %s %s\n\n"+
					"Context: %s\n"+
					"Details: %s",
					kind, name, strings.ToLower(kind), name,
					func() string {
						if namespace != "" {
							return fmt.Sprintf("-n %s", namespace)
						}
						return ""
					}(), kubeContext, err.Error()),
			)
		} else {
			resp.Diagnostics.AddError(
				"Import Failed: Discovery/Fetch Error",
				fmt.Sprintf("Failed to discover or fetch the %s \"%s\".\n\n"+
					"Context: %s\n"+
					"Details: %s", kind, name, kubeContext, err.Error()),
			)
		}
		return
	}

	// Convert live object back to clean YAML
	yamlBytes, err := r.objectToYAML(liveObj)
	if err != nil {
		resp.Diagnostics.AddError(
			"Import Failed: YAML Conversion Error",
			fmt.Sprintf("Failed to convert the imported object to YAML: %s", err.Error()),
		)
		return
	}

	// Generate resource ID using a special import-based approach
	// Since we don't have the final cluster connection yet, we'll use the context
	resourceID := r.generateIDFromImport(liveObj, kubeContext)

	// Populate state with imported data - cluster_connection will be configured by user
	importedData := manifestResourceModel{
		ID:       types.StringValue(resourceID),
		YAMLBody: types.StringValue(string(yamlBytes)),
		// Note: cluster_connection is left empty - user must configure it
		DeleteProtection: types.BoolValue(false), // default
	}

	// Set the imported state
	diags := resp.State.Set(ctx, &importedData)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Info(ctx, "successfully imported resource", map[string]interface{}{
		"import_id":   req.ID,
		"resource_id": resourceID,
		"kind":        liveObj.GetKind(),
		"name":        liveObj.GetName(),
		"namespace":   liveObj.GetNamespace(),
		"context":     kubeContext,
		"kubeconfig":  kubeconfigPath,
	})

	// Add informational message about next steps
	resp.Diagnostics.AddWarning(
		"Import Successful - Configuration Required",
		"The resource has been imported successfully. You must now configure the cluster_connection block in your Terraform configuration to match your desired connection method.\n\n"+
			"Example configuration:\n"+
			"  resource \"k8sinline_manifest\" \"example\" {\n"+
			"    yaml_body = \"# Populated by import\"\n"+
			"    \n"+
			"    cluster_connection {\n"+
			"      # Choose your preferred connection method:\n"+
			"      kubeconfig_file = \"~/.kube/config\"\n"+
			"      context         = \""+kubeContext+"\"\n"+
			"    }\n"+
			"  }\n\n"+
			"Run 'terraform plan' to see if your configuration matches the imported resource.",
	)
}

// parseYAML converts YAML string to unstructured.Unstructured
func (r *manifestResource) parseYAML(yamlStr string) (*unstructured.Unstructured, error) {
	obj := &unstructured.Unstructured{}
	err := yaml.Unmarshal([]byte(yamlStr), obj)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal YAML: %w", err)
	}

	// Validate required fields
	if obj.GetAPIVersion() == "" {
		return nil, fmt.Errorf("apiVersion is required")
	}
	if obj.GetKind() == "" {
		return nil, fmt.Errorf("kind is required")
	}
	if obj.GetName() == "" {
		return nil, fmt.Errorf("metadata.name is required")
	}

	return obj, nil
}

// createK8sClient creates a K8sClient from cluster connection configuration
func (r *manifestResource) createK8sClient(conn ClusterConnectionModel) (k8sclient.K8sClient, error) {
	// Determine connection mode
	hasInline := !conn.Host.IsNull() || !conn.ClusterCACertificate.IsNull()
	hasFile := !conn.KubeconfigFile.IsNull()
	hasRaw := !conn.KubeconfigRaw.IsNull()

	modeCount := 0
	if hasInline {
		modeCount++
	}
	if hasFile {
		modeCount++
	}
	if hasRaw {
		modeCount++
	}

	if modeCount == 0 {
		return nil, fmt.Errorf("must specify exactly one of: inline connection, kubeconfig_file, or kubeconfig_raw")
	}
	if modeCount > 1 {
		return nil, fmt.Errorf("cannot specify multiple connection modes")
	}

	// Create REST config
	var config *rest.Config
	var err error

	switch {
	case hasInline:
		config, err = r.createInlineConfig(conn)
	case hasFile:
		config, err = r.createFileConfig(conn)
	case hasRaw:
		config, err = r.createRawConfig(conn)
	default:
		return nil, fmt.Errorf("no valid connection mode specified")
	}

	if err != nil {
		return nil, err
	}

	// Use simple dynamic client
	return k8sclient.NewDynamicK8sClient(config)
}

// createInlineConfig creates a REST config from inline connection settings
func (r *manifestResource) createInlineConfig(conn ClusterConnectionModel) (*rest.Config, error) {
	if conn.Host.IsNull() {
		return nil, fmt.Errorf("host is required for inline connection")
	}
	if conn.ClusterCACertificate.IsNull() {
		return nil, fmt.Errorf("cluster_ca_certificate is required for inline connection")
	}

	// Decode base64-encoded CA certificate
	caData, err := base64.StdEncoding.DecodeString(conn.ClusterCACertificate.ValueString())
	if err != nil {
		return nil, fmt.Errorf("failed to decode cluster_ca_certificate: %w", err)
	}

	// Build REST config directly
	config := &rest.Config{
		Host: conn.Host.ValueString(),
		TLSClientConfig: rest.TLSClientConfig{
			CAData: caData,
		},
	}

	// Add exec provider if specified
	if conn.Exec != nil && !conn.Exec.APIVersion.IsNull() {
		args := make([]string, len(conn.Exec.Args))
		for i, arg := range conn.Exec.Args {
			args[i] = arg.ValueString()
		}

		config.ExecProvider = &clientcmdapi.ExecConfig{
			APIVersion:      conn.Exec.APIVersion.ValueString(),
			Command:         conn.Exec.Command.ValueString(),
			Args:            args,
			Env:             []clientcmdapi.ExecEnvVar{},
			InteractiveMode: clientcmdapi.NeverExecInteractiveMode,
		}
	}

	return config, nil
}

// createFileConfig creates a REST config from kubeconfig file
func (r *manifestResource) createFileConfig(conn ClusterConnectionModel) (*rest.Config, error) {
	kubeconfigPath := conn.KubeconfigFile.ValueString()
	context := ""
	if !conn.Context.IsNull() {
		context = conn.Context.ValueString()
	}

	if context != "" {
		// Load kubeconfig file and set context
		clientConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(
			&clientcmd.ClientConfigLoadingRules{ExplicitPath: kubeconfigPath},
			&clientcmd.ConfigOverrides{CurrentContext: context},
		)
		return clientConfig.ClientConfig()
	}

	return clientcmd.BuildConfigFromFlags("", kubeconfigPath)
}

// createRawConfig creates a REST config from raw kubeconfig data
func (r *manifestResource) createRawConfig(conn ClusterConnectionModel) (*rest.Config, error) {
	kubeconfigData := []byte(conn.KubeconfigRaw.ValueString())

	config, err := clientcmd.RESTConfigFromKubeConfig(kubeconfigData)
	if err != nil {
		return nil, fmt.Errorf("failed to parse kubeconfig: %w", err)
	}

	if !conn.Context.IsNull() {
		context := conn.Context.ValueString()
		// Load kubeconfig and set context
		clientConfig, err := clientcmd.Load(kubeconfigData)
		if err != nil {
			return nil, fmt.Errorf("failed to load kubeconfig: %w", err)
		}

		if _, exists := clientConfig.Contexts[context]; !exists {
			return nil, fmt.Errorf("context %q not found in kubeconfig", context)
		}

		clientConfig.CurrentContext = context
		return clientcmd.NewDefaultClientConfig(*clientConfig, &clientcmd.ConfigOverrides{}).ClientConfig()
	}

	return config, nil
}

// getGVR determines the GroupVersionResource for an object
func (r *manifestResource) getGVR(ctx context.Context, client k8sclient.K8sClient, obj *unstructured.Unstructured) (k8sschema.GroupVersionResource, error) {
	return client.GetGVR(ctx, obj)
}

// generateID creates a unique identifier for the resource
func (r *manifestResource) generateID(obj *unstructured.Unstructured, conn ClusterConnectionModel) string {
	// Create a deterministic ID based on cluster + object identity
	data := fmt.Sprintf("%s/%s/%s/%s",
		r.getClusterID(conn),
		obj.GetNamespace(),
		obj.GetKind(),
		obj.GetName(),
	)

	hash := sha256.Sum256([]byte(data))
	return hex.EncodeToString(hash[:])
}

// getClusterID creates a stable identifier for the cluster connection
func (r *manifestResource) getClusterID(conn ClusterConnectionModel) string {
	// Use host if available, otherwise hash the kubeconfig
	if !conn.Host.IsNull() {
		return conn.Host.ValueString()
	}

	var data string
	if !conn.KubeconfigFile.IsNull() {
		data = conn.KubeconfigFile.ValueString()
	} else if !conn.KubeconfigRaw.IsNull() {
		data = conn.KubeconfigRaw.ValueString()
	}

	hash := sha256.Sum256([]byte(data))
	return hex.EncodeToString(hash[:8]) // Use first 8 bytes for shorter ID
}

// classifyK8sError categorizes Kubernetes API errors for better user experience
func (r *manifestResource) classifyK8sError(err error, operation, resourceDesc string) (severity, title, detail string) {
	switch {
	case errors.IsNotFound(err):
		return "warning", fmt.Sprintf("%s: Resource Not Found", operation),
			fmt.Sprintf("The %s was not found in the cluster. It may have been deleted outside of Terraform.", resourceDesc)

	case errors.IsForbidden(err):
		return "error", fmt.Sprintf("%s: Insufficient Permissions", operation),
			fmt.Sprintf("RBAC permissions insufficient to %s %s. Check that your credentials have the required permissions for this operation. Details: %v",
				operation, resourceDesc, err)

	case errors.IsConflict(err):
		return "error", fmt.Sprintf("%s: Field Manager Conflict", operation),
			fmt.Sprintf("Server-side apply conflict detected for %s. Another tool or process may be managing the same fields. Consider using 'force=true' or resolve the conflict manually. Details: %v",
				resourceDesc, err)

	case errors.IsTimeout(err) || errors.IsServerTimeout(err):
		return "error", fmt.Sprintf("%s: Kubernetes API Timeout", operation),
			fmt.Sprintf("Timeout while performing %s on %s. The cluster may be under heavy load or experiencing connectivity issues. Details: %v",
				operation, resourceDesc, err)

	case errors.IsUnauthorized(err):
		return "error", fmt.Sprintf("%s: Authentication Failed", operation),
			fmt.Sprintf("Authentication failed for %s %s. Check your credentials and ensure they are valid. Details: %v",
				operation, resourceDesc, err)

	case errors.IsInvalid(err):
		return "error", fmt.Sprintf("%s: Invalid Resource", operation),
			fmt.Sprintf("The %s contains invalid fields or values. Review the YAML specification and ensure all required fields are present and correctly formatted. Details: %v",
				resourceDesc, err)

	case errors.IsAlreadyExists(err):
		return "error", fmt.Sprintf("%s: Resource Already Exists", operation),
			fmt.Sprintf("The %s already exists in the cluster and cannot be created. Use import to manage existing resources with Terraform. Details: %v",
				resourceDesc, err)

	default:
		return "error", fmt.Sprintf("%s: Kubernetes API Error", operation),
			fmt.Sprintf("An unexpected error occurred while performing %s on %s. Details: %v",
				operation, resourceDesc, err)
	}
}

// Updated parseImportID function to handle new format with context
func (r *manifestResource) parseImportID(importID string) (context, namespace, kind, name string, err error) {
	parts := strings.Split(importID, "/")

	switch len(parts) {
	case 3:
		// Cluster-scoped: "context/kind/name"
		return parts[0], "", parts[1], parts[2], nil
	case 4:
		// Namespaced: "context/namespace/kind/name"
		return parts[0], parts[1], parts[2], parts[3], nil
	default:
		return "", "", "", "", fmt.Errorf("expected 3 or 4 parts separated by '/', got %d parts", len(parts))
	}
}

// isEmptyConnection checks if the cluster connection is empty/unconfigured
func (r *manifestResource) isEmptyConnection(conn ClusterConnectionModel) bool {
	hasInline := !conn.Host.IsNull() || !conn.ClusterCACertificate.IsNull()
	hasFile := !conn.KubeconfigFile.IsNull()
	hasRaw := !conn.KubeconfigRaw.IsNull()

	return !hasInline && !hasFile && !hasRaw
}

// objectToYAML converts an unstructured object back to clean YAML
func (r *manifestResource) objectToYAML(obj *unstructured.Unstructured) ([]byte, error) {
	// Create a clean copy without managed fields and other cluster-added metadata
	cleanObj := r.cleanObjectForExport(obj)

	// Convert to YAML
	yamlBytes, err := yaml.Marshal(cleanObj.Object)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal object to YAML: %w", err)
	}

	return yamlBytes, nil
}

// cleanObjectForExport removes server-generated fields that would cause apply failures
func (r *manifestResource) cleanObjectForExport(obj *unstructured.Unstructured) *unstructured.Unstructured {
	// Create a deep copy
	cleaned := obj.DeepCopy()

	// Remove only the fields that will definitely cause problems on re-apply
	metadata := cleaned.Object["metadata"].(map[string]interface{})

	// These fields MUST be removed or kubectl apply fails
	delete(metadata, "uid")
	delete(metadata, "resourceVersion")
	delete(metadata, "generation")
	delete(metadata, "creationTimestamp")
	delete(metadata, "managedFields")

	// Remove status field entirely (never needed for apply)
	delete(cleaned.Object, "status")

	// Leave everything else - let the user clean up if they want
	// This is safer than trying to guess what's system-generated

	return cleaned
}

// isSystemAnnotation returns true if the annotation key is system-generated
func (r *manifestResource) isSystemAnnotation(key string) bool {
	// Be conservative - only remove the most obviously system-generated annotations
	// Instead of maintaining a huge list, focus on the most common ones
	wellKnownSystemPrefixes := []string{
		"kubectl.kubernetes.io/",
		"deployment.kubernetes.io/",
		"kubernetes.io/managed-by",
	}

	for _, prefix := range wellKnownSystemPrefixes {
		if strings.HasPrefix(key, prefix) {
			return true
		}
	}

	// Alternative: let users decide what to keep vs remove
	// Could add a provider-level setting for annotation filtering
	return false
}

// Helper function to generate ID for imported resources
func (r *manifestResource) generateIDFromImport(obj *unstructured.Unstructured, kubeContext string) string {
	// Create a deterministic ID based on context + object identity
	data := fmt.Sprintf("import:%s/%s/%s/%s",
		kubeContext,
		obj.GetNamespace(),
		obj.GetKind(),
		obj.GetName(),
	)

	hash := sha256.Sum256([]byte(data))
	return hex.EncodeToString(hash[:])
}
